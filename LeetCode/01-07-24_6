// Problem Link: https://leetcode.com/problems/split-linked-list-in-parts/description/

class Solution {
public:
    vector<ListNode*> splitListToParts(ListNode* head, int k) {
        int length = 0;
        ListNode* node = head;
        while (node != nullptr) {
            length++;
            node = node->next;
        }

        int partSize = length / k;
        int remainder = length % k;
        vector<ListNode*> result(k, nullptr);
        ListNode* current = head;
        ListNode* prev = nullptr;

        for (int i = 0; i < k && current != nullptr; ++i) {
            result[i] = current;
            int currentPartSize = partSize + (i < remainder ? 1 : 0);

            for (int j = 0; j < currentPartSize; ++j) {
                prev = current;
                current = current->next;
            }

            if (prev != nullptr) {
                prev->next = nullptr;
            }
        }

        return result;
    }
};
